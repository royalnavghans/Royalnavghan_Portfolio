{"ast":null,"code":"import listen from 'dom-helpers/listen';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport { useEffect } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport useClickOutside, { getRefTarget } from './useClickOutside';\nimport { isEscKey } from './utils';\n\nvar noop = function noop() {};\n/**\n * The `useRootClose` hook registers your callback on the document\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\n * style behavior where your callback is triggered when the user tries to\n * interact with the rest of the document or hits the `esc` key.\n *\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\n * @param {function} onRootClose\n * @param {object=}  options\n * @param {boolean=} options.disabled\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\n */\n\n\nfunction useRootClose(ref, onRootClose) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      disabled = _ref.disabled,\n      clickTrigger = _ref.clickTrigger;\n\n  var onClose = onRootClose || noop;\n  useClickOutside(ref, onClose, {\n    disabled: disabled,\n    clickTrigger: clickTrigger\n  });\n  var handleKeyUp = useEventCallback(function (e) {\n    if (isEscKey(e)) {\n      onClose(e);\n    }\n  });\n  useEffect(function () {\n    if (disabled || ref == null) return undefined;\n    var doc = ownerDocument(getRefTarget(ref)); // Store the current event to avoid triggering handlers immediately\n    // https://github.com/facebook/react/issues/20074\n\n    var currentEvent = (doc.defaultView || window).event;\n    var removeKeyupListener = listen(doc, 'keyup', function (e) {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      handleKeyUp(e);\n    });\n    return function () {\n      removeKeyupListener();\n    };\n  }, [ref, disabled, handleKeyUp]);\n}\n\nexport default useRootClose;","map":{"version":3,"names":["listen","ownerDocument","useEffect","useEventCallback","useClickOutside","getRefTarget","isEscKey","noop","useRootClose","ref","onRootClose","disabled","clickTrigger","onClose","handleKeyUp","e","undefined","doc","currentEvent","defaultView","window","event","removeKeyupListener"],"sources":["C:/Users/Asus/Desktop/Royalnavghan_Portfolio/node_modules/@restart/ui/esm/useRootClose.js"],"sourcesContent":["import listen from 'dom-helpers/listen';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport { useEffect } from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport useClickOutside, { getRefTarget } from './useClickOutside';\nimport { isEscKey } from './utils';\nconst noop = () => {};\n/**\n * The `useRootClose` hook registers your callback on the document\n * when rendered. Powers the `<Overlay/>` component. This is used achieve modal\n * style behavior where your callback is triggered when the user tries to\n * interact with the rest of the document or hits the `esc` key.\n *\n * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary\n * @param {function} onRootClose\n * @param {object=}  options\n * @param {boolean=} options.disabled\n * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on\n */\nfunction useRootClose(ref, onRootClose, {\n  disabled,\n  clickTrigger\n} = {}) {\n  const onClose = onRootClose || noop;\n  useClickOutside(ref, onClose, {\n    disabled,\n    clickTrigger\n  });\n  const handleKeyUp = useEventCallback(e => {\n    if (isEscKey(e)) {\n      onClose(e);\n    }\n  });\n  useEffect(() => {\n    if (disabled || ref == null) return undefined;\n    const doc = ownerDocument(getRefTarget(ref));\n\n    // Store the current event to avoid triggering handlers immediately\n    // https://github.com/facebook/react/issues/20074\n    let currentEvent = (doc.defaultView || window).event;\n    const removeKeyupListener = listen(doc, 'keyup', e => {\n      // skip if this event is the same as the one running when we added the handlers\n      if (e === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n      handleKeyUp(e);\n    });\n    return () => {\n      removeKeyupListener();\n    };\n  }, [ref, disabled, handleKeyUp]);\n}\nexport default useRootClose;"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,eAAP,IAA0BC,YAA1B,QAA8C,mBAA9C;AACA,SAASC,QAAT,QAAyB,SAAzB;;AACA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAE,CAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,WAA3B,EAGQ;EAAA,+EAAJ,EAAI;EAAA,IAFNC,QAEM,QAFNA,QAEM;EAAA,IADNC,YACM,QADNA,YACM;;EACN,IAAMC,OAAO,GAAGH,WAAW,IAAIH,IAA/B;EACAH,eAAe,CAACK,GAAD,EAAMI,OAAN,EAAe;IAC5BF,QAAQ,EAARA,QAD4B;IAE5BC,YAAY,EAAZA;EAF4B,CAAf,CAAf;EAIA,IAAME,WAAW,GAAGX,gBAAgB,CAAC,UAAAY,CAAC,EAAI;IACxC,IAAIT,QAAQ,CAACS,CAAD,CAAZ,EAAiB;MACfF,OAAO,CAACE,CAAD,CAAP;IACD;EACF,CAJmC,CAApC;EAKAb,SAAS,CAAC,YAAM;IACd,IAAIS,QAAQ,IAAIF,GAAG,IAAI,IAAvB,EAA6B,OAAOO,SAAP;IAC7B,IAAMC,GAAG,GAAGhB,aAAa,CAACI,YAAY,CAACI,GAAD,CAAb,CAAzB,CAFc,CAId;IACA;;IACA,IAAIS,YAAY,GAAG,CAACD,GAAG,CAACE,WAAJ,IAAmBC,MAApB,EAA4BC,KAA/C;IACA,IAAMC,mBAAmB,GAAGtB,MAAM,CAACiB,GAAD,EAAM,OAAN,EAAe,UAAAF,CAAC,EAAI;MACpD;MACA,IAAIA,CAAC,KAAKG,YAAV,EAAwB;QACtBA,YAAY,GAAGF,SAAf;QACA;MACD;;MACDF,WAAW,CAACC,CAAD,CAAX;IACD,CAPiC,CAAlC;IAQA,OAAO,YAAM;MACXO,mBAAmB;IACpB,CAFD;EAGD,CAlBQ,EAkBN,CAACb,GAAD,EAAME,QAAN,EAAgBG,WAAhB,CAlBM,CAAT;AAmBD;;AACD,eAAeN,YAAf"},"metadata":{},"sourceType":"module"}